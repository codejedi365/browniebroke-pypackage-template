{% raw %}name: CI

on:
  push:
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: pre-commit/action@v3.0.1

  # Make sure commit messages follow the conventional commits convention:
  # https://www.conventionalcommits.org
  commitlint:
    name: Lint Commit Messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@v6.0.1

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.9"
          - "3.10"
          - "3.11"
          - "3.12"
          - "3.13"
        os:
          - ubuntu-latest
          - windows-latest
          - macOS-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4{% endraw %}
{%- if is_django_package %}{% raw %}
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v5
      - run: uv pip install --system tox tox-uv
        shell: bash
      - run: tox -f py$(echo ${{ matrix.python-version }} | tr -d .)
        shell: bash
{% endraw %}
{%- else %}{% raw %}
      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v5
      - run: uv sync --no-python-downloads
        shell: bash
      - run: uv run pytest
        shell: bash{% endraw %}
{%- endif  %}{% raw %}
      - uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  release:
    needs:
      - test
      - lint
      - commitlint

    runs-on: ubuntu-latest

    concurrency:
      group: ${{ github.workflow }}-release-${{ github.ref_name }}
      cancel-in-progress: false

    permissions:
      attestations: write
      contents: write

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - name: Setup | Force release branch to be at workflow sha
        run: |
          git reset --hard ${{ github.sha }}

      # Do a dry run of PSR
      - name: Test release
        uses: python-semantic-release/python-semantic-release@917a2c730cb8f6c8cd3d00f23c876d724a4a844c  # v10.0.1
        if: github.ref_name != 'main'
        with:
          no_operation_mode: true
          github_token: noop

      - name: Evaluate | Verify upstream has NOT changed
        if: github.ref_name == 'main'
        # Last chance to abort before causing an error as another PR/push was applied to the upstream branch
        # while this workflow was running. This is important because we are committing a version change
        shell: bash
        run: bash .github/workflows/verify_upstream.sh

      # On main branch: actual PSR + upload to PyPI & GitHub
      - name: Release
        uses: python-semantic-release/python-semantic-release@917a2c730cb8f6c8cd3d00f23c876d724a4a844c  # v10.0.1
        id: release
        if: github.ref_name == 'main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Distribution Artifacts to Workflow
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02  # v4.6.2
        if: steps.release.outputs.released == 'true'
        with:
          name: distribution-artifacts
          path: dist
          if-no-files-found: error
          retention-days: 2

      - name: Attest build provenance
        uses: actions/attest-build-provenance@ef244123eb79f2f7a7e75d99086184180e6d0018  # v1.4.4
        if: steps.release.outputs.released == 'true'
        with:
          subject-path: "dist/*"

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/publish-action@d3a9934c4fff57f0d4df24450566d3dba7e7082a  # v10.0.1
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.tag }}

    outputs:
      released: ${{ steps.release.outputs.released || 'false' }}


  deliver:
    name: Deliver
    runs-on: ubuntu-latest
    if: ${{ needs.release.outputs.released == 'true' }}
    needs:
      - release

    environment: release
    permissions:
      id-token: write  # needed for PyPI upload

    steps:
      - name: Setup | Download Build Artifacts
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093  # v4.3.0
        id: artifact-download
        with:
          name: distribution-artifacts
          path: dist

      # see https://docs.pypi.org/trusted-publishers/
      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc  # v1.12.4
        with:
          packages-dir: dist
          print-hash: true
          verbose: true{% endraw %}
